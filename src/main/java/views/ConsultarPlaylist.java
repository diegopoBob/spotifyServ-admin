/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views;

import controllers.Fabrica;
import controllers.IGeneroController;
import controllers.IPlaylistController;
import controllers.IUsuarioController;
import java.awt.Font;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

public class ConsultarPlaylist extends javax.swing.JInternalFrame {
    Fabrica fabrica = Fabrica.getInstance();
    IPlaylistController controladorP = fabrica.getIPlaylistController();
    IUsuarioController controladorUsuario = fabrica.getIUsuarioController();
    IGeneroController controladorGenero = fabrica.getIGeneroController();
    DefaultTableModel sinNada = new DefaultTableModel();
    /**
     * Creates new form ConsultaUsuario
     */
    public ConsultarPlaylist() {
        
        initComponents();
        DatosGenero.setVisible(false);
        DatosCliente.setVisible(false);

        List<String> nombresClientes = controladorUsuario.obtenerNombresClientes();
        for (String nombreC : nombresClientes) {
            DatosCliente.addItem(nombreC);
        }
        List<String> nombresGenero = controladorGenero.obtenerNombresGeneros();
        for (String nombreG : nombresGenero) {
            DatosGenero.addItem(nombreG);
        }
        ListaPlaylist.setRowHeight(140);
        ListaPlaylist.setFont(new Font("Arial", Font.PLAIN, 16));
        ListaPlaylist.setShowGrid(true);
    }

    class NonEditableTableModel extends DefaultTableModel {

        public NonEditableTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
            
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaPlaylist = new javax.swing.JTable();
        GeneroCliente = new javax.swing.JComboBox<>();
        DatosGenero = new javax.swing.JComboBox<>();
        DatosCliente = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consulta Playlist");
        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(1100, 700));

        ListaPlaylist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ListaPlaylist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "RUTA IMAGEN", "TIPO", "PRIVADA", "GENERO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ListaPlaylist.setRowHeight(40);
        ListaPlaylist.setShowHorizontalLines(true);
        ListaPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaPlaylistMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaPlaylist);

        GeneroCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione filtro", "Todas", "Genero", "Cliente" }));
        GeneroCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroCliente(evt);
            }
        });

        DatosGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Genero" }));
        DatosGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatosGeneroActionPerformed(evt);
            }
        });

        DatosCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Cliente" }));
        DatosCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatosClienteActionPerformed(evt);
            }
        });

        jLabel2.setText("FILTRO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1066, Short.MAX_VALUE)
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(598, 598, 598)
                                .addComponent(jLabel1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(DatosGenero, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DatosCliente, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GeneroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(350, 350, 350)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GeneroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DatosGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DatosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GeneroCliente(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroCliente
      
        if ("Todas".equals(GeneroCliente.getSelectedItem())) {
            ListaPlaylist.setModel(sinNada);
            DatosGenero.setVisible(false);
            DatosCliente.setVisible(false);
            Object[][] datos = controladorP.obtenerPlaylistLista();
            String[] columnNames = {"IMAGEN","ID", "NOMBRE", "DTYPE","PRIVADA","GENERO","PROPIETARIO"};
            NonEditableTableModel tableModel = new NonEditableTableModel(datos, columnNames);

            ListaPlaylist.setModel(tableModel);
            ListaPlaylist.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
         
        } 
        else if ("Genero".equals(GeneroCliente.getSelectedItem())) {
            ListaPlaylist.setModel(sinNada);
            DatosGenero.setVisible(true);
            DatosCliente.setVisible(false);

        } else if("Cliente".equals(GeneroCliente.getSelectedItem())){
            ListaPlaylist.setModel(sinNada);
            DatosGenero.setVisible(false);
            DatosCliente.setVisible(true);

        }else{
            ListaPlaylist.setModel(sinNada);
            DatosGenero.setVisible(false);
            DatosCliente.setVisible(false);
        }
        
        
    }//GEN-LAST:event_GeneroCliente

    private void DatosGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatosGeneroActionPerformed
        ListaPlaylist.setVisible(true);
       if ("Genero".equals(GeneroCliente.getSelectedItem())) {
            Object[][] datos = controladorP.obtenerDatosPlaylistGenero(DatosGenero.getSelectedItem().toString());
            String[] columnNames = {"RUTAIMAGEN","ID", "NOMBRE",  "DTYPE", "GENERO"};
            NonEditableTableModel tableModel = new NonEditableTableModel(datos, columnNames);
            ListaPlaylist.setModel(tableModel);
            ListaPlaylist.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
            
        
        }
 
    }//GEN-LAST:event_DatosGeneroActionPerformed

    private void DatosClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatosClienteActionPerformed

        if ("Cliente".equals(GeneroCliente.getSelectedItem())){
            Object[][] datos = controladorP.obtenerDatosPlaylistCliente(DatosCliente.getSelectedItem().toString());
            String[] columnNames = {"RUTAIMAGEN","ID", "NOMBRE", "DTYPE", "PRIVADA"};
            NonEditableTableModel tableModel = new NonEditableTableModel(datos, columnNames);
            ListaPlaylist.setModel(tableModel);
            ListaPlaylist.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
            
        }
    }//GEN-LAST:event_DatosClienteActionPerformed

    private void ListaPlaylistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaPlaylistMouseClicked
        if (evt.getClickCount() == 2) { // Detectar clic simple
            int row = ListaPlaylist.rowAtPoint(evt.getPoint());
            if (row >= 0) {
                int id = (int) ListaPlaylist.getValueAt(row, 1); // Cambia 1 al índice de la columna deseada 
                Object[][] datos = controladorP.obtenerDatosPlaylist(id);
                jFrameCanciones jFrameC = new jFrameCanciones(datos);
                jFrameC.setVisible(true);
            }
        }
    }//GEN-LAST:event_ListaPlaylistMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DatosCliente;
    private javax.swing.JComboBox<String> DatosGenero;
    private javax.swing.JComboBox<String> GeneroCliente;
    private javax.swing.JTable ListaPlaylist;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
